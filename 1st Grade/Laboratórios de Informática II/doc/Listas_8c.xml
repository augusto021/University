<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="Listas_8c" kind="file" language="C++">
    <compoundname>Listas.c</compoundname>
    <includes refid="Listas_8h" local="yes">Listas.h</includes>
    <includes refid="Logicadoprograma_8h" local="yes">Logicadoprograma.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="yes">stdio.h</includes>
    <incdepgraph>
      <node id="4">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>Dados.h</label>
        <link refid="Dados_8h"/>
      </node>
      <node id="5">
        <label>Logicadoprograma.h</label>
        <link refid="Logicadoprograma_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>projeto/Listas.c</label>
        <link refid="Listas_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Listas.h</label>
        <link refid="Listas_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="Listas_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
<para>Função que insere um valor na cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para>========================================MODULO DAS LISTAS LIGADAS================================================== Cria uma lista vazia </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="9" column="7" bodyfile="projeto/Listas.c" bodystart="9" bodyend="13"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1a37ba5fc3cfddb6bc94d4b54b00bc696e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA L, void *valor)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>valor</declname>
        </param>
        <briefdescription>
<para>Função que insere um valor na cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para>Insere um valor na cabeça da lista. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="16" column="7" bodyfile="projeto/Listas.c" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1abfcb205f3eb670157be0d1221021714b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para>Devolve a cabeça da lista. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="25" column="6" bodyfile="projeto/Listas.c" bodystart="25" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1ad9380152361127432c55c1c6067e05ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cauda da lista. </para>
        </briefdescription>
        <detaileddescription>
<para>Devolve a cauda da lista. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="30" column="7" bodyfile="projeto/Listas.c" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1a9026a681a68322b5ec7f07137b864cbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que remove a cabeça da lista (libertando o espaço ocupado) e devolve a cauda. </para>
        </briefdescription>
        <detaileddescription>
<para>Remove a cabeça da lista (libertando o espaço ocupado) e devolve a cauda. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="35" column="7" bodyfile="projeto/Listas.c" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1a4c10928f7acaa4e3de3760cea0dfd9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve verdadeiro se a lista é vazia. </para>
        </briefdescription>
        <detaileddescription>
<para>Devolve verdareiro se a lista é vazia. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="43" column="5" bodyfile="projeto/Listas.c" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1a13d79a0926a30e7796576a461f262f04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int length_lista</definition>
        <argsstring>(LISTA L)</argsstring>
        <name>length_lista</name>
        <param>
          <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
          <declname>L</declname>
        </param>
        <briefdescription>
<para>Função que devolve verdadeiro se a lista é vazia. </para>
        </briefdescription>
        <detaileddescription>
<para>Indica o comprimento de uma lista. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="50" column="5" bodyfile="projeto/Listas.c" bodystart="50" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="Listas_8c_1a0adcd982afe5a2e23427e53213bab59c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structsLista" kindref="compound">LISTA</ref></type>
        <definition>LISTA armazena_branca</definition>
        <argsstring>(ESTADO *e, COORDENADA c)</argsstring>
        <name>armazena_branca</name>
        <param>
          <type><ref refid="structESTADO" kindref="compound">ESTADO</ref> *</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref></type>
          <declname>c</declname>
        </param>
        <briefdescription>
<para>Função que cria a lista de casas vazia á volta da peça branca. </para>
        </briefdescription>
        <detaileddescription>
<para>Função que cria a lista de casas vazia á volta da beça branca </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="projeto/Listas.c" line="58" column="7" bodyfile="projeto/Listas.c" bodystart="58" bodyend="108"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Listas_8h" kindref="compound">Listas.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="Logicadoprograma_8h" kindref="compound">Logicadoprograma.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;stdio.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"><ref refid="structsLista" kindref="compound">LISTA</ref><sp/><ref refid="Listas_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" kindref="member">criar_lista</ref>(){</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsLista" kindref="compound">LISTA</ref><sp/>lista;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>lista<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lista;</highlight></codeline>
<codeline lineno="13"><highlight class="normal">}</highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><ref refid="structsLista" kindref="compound">LISTA</ref><sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(<ref refid="structsLista" kindref="compound">LISTA</ref><sp/>L,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*valor){</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsLista" kindref="compound">LISTA</ref><sp/>l<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structsLista" kindref="compound">Nodo</ref>));</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;variavel<sp/>=<sp/>valor;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;prox<sp/>=<sp/>L;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="Listas_8h_1abfcb205f3eb670157be0d1221021714b" kindref="member">devolve_cabeca</ref>(<ref refid="structsLista" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(L-&gt;variavel);</highlight></codeline>
<codeline lineno="27"><highlight class="normal">}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="structsLista" kindref="compound">LISTA</ref><sp/><ref refid="Listas_8h_1ad9380152361127432c55c1c6067e05ae" kindref="member">proximo</ref>(<ref refid="structsLista" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(L-&gt;prox);</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><ref refid="structsLista" kindref="compound">LISTA</ref><sp/><ref refid="Listas_8h_1a9026a681a68322b5ec7f07137b864cbd" kindref="member">remove_cabeca</ref>(<ref refid="structsLista" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsLista" kindref="compound">LISTA</ref><sp/>temp;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>temp<sp/>=<sp/>L-&gt;prox;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>free(L);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(temp);</highlight></codeline>
<codeline lineno="40"><highlight class="normal">}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="Listas_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" kindref="member">lista_esta_vazia</ref>(<ref refid="structsLista" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(L<sp/>==<sp/>NULL)</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal">}</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="Listas_8h_1a13d79a0926a30e7796576a461f262f04" kindref="member">length_lista</ref>(<ref refid="structsLista" kindref="compound">LISTA</ref><sp/>L){</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;!<ref refid="Listas_8h_1a4c10928f7acaa4e3de3760cea0dfd9c0" kindref="member">lista_esta_vazia</ref>(L);i++)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>L<sp/>=<sp/>L-&gt;prox;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><ref refid="structsLista" kindref="compound">LISTA</ref><sp/><ref refid="Listas_8h_1a0adcd982afe5a2e23427e53213bab59c" kindref="member">armazena_branca</ref>(<ref refid="structESTADO" kindref="compound">ESTADO</ref><sp/>*e,<sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x,<sp/>y;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structsLista" kindref="compound">LISTA</ref><sp/>l<sp/>=<sp/><ref refid="Listas_8h_1ae3b99323b6f8f35d80bb69ff1a27985e" kindref="member">criar_lista</ref>();</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>c.linha;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>c.coluna;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l1<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l2<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l3<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l4<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l5<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l6<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l7<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref><sp/>*l8<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structCOORDENADA" kindref="compound">COORDENADA</ref>));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>l1-&gt;linha<sp/>=<sp/>x<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>l1-&gt;coluna<sp/>=<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>l2-&gt;linha<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>l2-&gt;coluna<sp/>=<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>l3-&gt;linha<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>l3-&gt;coluna<sp/>=<sp/>y<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>l4-&gt;linha<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>l4-&gt;coluna<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>l5-&gt;linha<sp/>=<sp/>x<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>l5-&gt;coluna<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>l6-&gt;linha<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>l6-&gt;coluna<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>l7-&gt;linha<sp/>=<sp/>x<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>l7-&gt;coluna<sp/>=<sp/>y<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>l8-&gt;linha<sp/>=<sp/>x<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>l8-&gt;coluna<sp/>=<sp/>y;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l1)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l1);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l1);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l2)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l2);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l2);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l3)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l3);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l3);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l4)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l4);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l4);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l5)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l5);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l5);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l6)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l6);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l6);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l7)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l7);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l7);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="Logicadoprograma_8h_1a2ffe600d2bd5255460de56fa4e0f2e6c" kindref="member">casa_livre</ref>(e,<sp/>*l8)<sp/>==<sp/>1)<sp/>l<sp/>=<sp/><ref refid="Listas_8h_1a37ba5fc3cfddb6bc94d4b54b00bc696e" kindref="member">insere_cabeca</ref>(l,<sp/>l8);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>free(l8);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="projeto/Listas.c"/>
  </compounddef>
</doxygen>
